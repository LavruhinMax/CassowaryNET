<style>
    .card {
        height: 400px;
        width: 320px;
        margin: 0 2vw 3vh 2vw;
        display: flex;
        flex-direction: column;
        border: 1px solid black;
        border-radius: 4px;
        box-shadow: 0 0 2px rgba(0, 0, 0, 0.5);
        transition: 0.2s;
        overflow: hidden;
        background-color: white;
        cursor: pointer
    }

        .card:hover {
            box-shadow: 0 0 10px rgba(0, 0, 0, 0.5);
        }

        .card img {
            width: 100%;
            height: 60%;
            object-fit: cover;
            object-position: center
        }


    .name {
        flex: 1;
        font-size: 20px;
        font-weight: 600;
        margin: 0;
        padding: 10px 20px 0 20px
    }

    .descr {
        flex: 1;
        font-size: 16px;
        font-weight: 500;
        margin: 0;
        overflow-y: hidden;
        padding: 10px 20px
    }

    .price-row {
        display: flex;
        font-size: 24px;
        flex: 1;
        font-weight: 600;
        font-style: italic;
        align-items: center;
        justify-content: space-between;
        padding: 10px 30px
    }

        .price-row p {
            margin: 0
        }

        .price-row img {
            width: 100px;
            height: 56px
        }

            .price-row img:hover {
                width: 106px;
                height: 60px
            }
</style>


<div class="card" @onclick="handleClick">
    <img src="data:image/jpeg;base64,@item.Photo64" />
    <p class="name">@item.itemName</p>
    <p class="descr">@item.Description</p>
    <div class="price-row">
        <p>@item.Price ₽</p>
        <img src="images/order.png" />
    </div>
</div>

@code {
    [Parameter] public Offer item { get; set; }
    [Parameter] public EventCallback onClick { get; set; }

    private async Task handleClick()
    {
        await onClick.InvokeAsync();
    }
}
