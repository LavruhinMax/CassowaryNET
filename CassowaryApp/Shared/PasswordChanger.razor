
<style>
    .popup {
    position: fixed;
    display: flex;
    flex-direction: column;
    align-items: center;
    justify-content: center;
    top: 27.5%;
    bottom: 27.5%;
    left: 35%;
    right: 35%;
    background-color: whitesmoke;
    border-radius: 0.5vw;
    box-shadow: 0 0 6px rgba(0, 0, 0, 0.5);
    overflow: hidden
    }

    .pop-title {
    display: flex;
    align-items: flex-start;
    flex: 1;
    font-size: 1.6vw;
    font-weight: 600;
    margin: 2vh 0 0 0
    }

    .error-txt {
    position: absolute;
    top: -30%;
    display: flex;
    align-items: flex-start;
    height: 10%;
    color: red;
    font-size: 1vw;
    margin: 0;
    font-weight: 600
    }

    .input-cnt {
    position: relative;
    height: 20%;
    width: 100%;
    display: flex;
    align-items: center;
    justify-content: center;
    }

    .pass-input {
    width: 70%;
    font-size: 1vw;
    font-weight: 800;
    height: 5vh;
    padding: 0 0 0 1%;
    border: 1px solid black;
    border-radius: 0.4vw;
    box-shadow: 0 0 3px rgba(0, 0, 0, 0.5)
    }

    .button-row {
    display: flex;
    flex: 1;
    width: 80%;
    align-items: center;
    justify-content: space-between
    }

    .ok-button, .cancel-button {
    width: 40%;
    height: 4vh;
    background-color: firebrick;
    color: white;
    font-weight: 600;
    font-size: 1vw;
    padding: 0 0.5vw;
    border: 1px solid firebrick;
    border-radius: 0.4vw;
    transition: 0.2s;
    cursor: pointer
    }

    .cancel-button {
    background-color: blue;
    border: 1px solid blue
    }

    .ok-button:hover {
    border: 1px solid red;
    background-color: red;
    }

    .cancel-button:hover {
    border: 1px solid darkblue;
    background-color: darkblue;
    }

    .exit {
    position: absolute;
    top: 25px;
    right: 25px;
    width: 2vw;
    height: 2vw;
    cursor: pointer
    }
</style>

<div class="popup" style="display:@(isVisible ? "flex" : "none")">
    <p class="pop-title">Смена пароля</p>
    <div class="input-cnt">
        <input class="pass-input" @bind="oldPassword" @oninput="inputChanged" placeholder="Старый пароль" type="password" />
        @if (showMessage)
        {
            @if (areFieldsEmpty)
            {
                <p class="error-txt">Заполните все поля!</p>
            }
            else if (!isOldPasswordСorrect)
            {
                <p class="error-txt">Неверный пароль!</p>
            }
            else if (!doPasswordsMatch)
            {
                <p class="error-txt">Пароли не совпадают!</p>
            }
            else if (!isPasswordLong)
            {
                <p class="error-txt">Не менее 6 символов!</p>
            }
            else if (!areOldAndNewSame)
            {
                <p class="error-txt">Старый и новый пароли одинаковы!</p>
            }
        }
    </div>
    <div class="input-cnt">
        <input class="pass-input" @bind="newPassword" @oninput="inputChanged" placeholder="Новый пароль" type="password" />
    </div>
    <div class="input-cnt">
        <input class="pass-input" @bind="repeatNewPassword" @oninput="inputChanged" placeholder="Подтвердите новый пароль" type="password" />
    </div>
    <div class="button-row">
        <button class="ok-button" @onclick="Check">Готово</button>
        <button class="cancel-button" @onclick="Close">Отмена</button>
    </div>
    <img class="exit" src="images/exit.png" @onclick="Close" />
</div>

@code {
    [Parameter] public bool isVisible { get; set; }
    [Parameter] public EventCallback isVisibleChanged { get; set; }
    [Parameter] public EventCallback<string> changePass { get; set; }
    private bool showMessage, isOldPasswordСorrect, doPasswordsMatch, isPasswordLong, areFieldsEmpty, areOldAndNewSame;
    private string oldPassword = string.Empty, newPassword = string.Empty, repeatNewPassword = string.Empty;

    protected override void OnParametersSet()
    {
        if (isVisible)
        {
            showMessage = false;
            areFieldsEmpty = false;
            areOldAndNewSame = false;
            isOldPasswordСorrect = true;
            doPasswordsMatch = true;
            isPasswordLong = true;
            oldPassword = "";
            newPassword = "";
            repeatNewPassword = "";
        }
    }

    public async Task Check()
    {
        areFieldsEmpty = string.IsNullOrEmpty(oldPassword) || string.IsNullOrEmpty(newPassword) || string.IsNullOrEmpty(repeatNewPassword);
        isOldPasswordСorrect = UserContext.Password == oldPassword;
        doPasswordsMatch = newPassword == repeatNewPassword;
        isPasswordLong = newPassword.Length < 6;
        areOldAndNewSame = oldPassword == newPassword;
        if (!areFieldsEmpty && isOldPasswordСorrect && doPasswordsMatch && !isPasswordLong && !areOldAndNewSame)
        {
            await changePass.InvokeAsync(newPassword);
            Close();
        }
        else showMessage = true;
    }

    private void inputChanged(ChangeEventArgs e) => showMessage = false;

    private void Close() => isVisibleChanged.InvokeAsync();
}
