<style>
    .tariff-popup {
    position: fixed;
    display: flex;
    flex-direction: column;
    align-items: center;
    justify-content: center;
    top: 25%;
    bottom: 25%;
    left: 30%;
    right: 30%;
    background-color: whitesmoke;
    border-radius: 0.5vw;
    box-shadow: 0 0 6px rgba(0, 0, 0, 0.5);
    overflow: hidden
    }

    .tariff-popup p {
    margin: 2vh 0;
    font-size: 1vw;
    font-weight: 600
    }

    .tariff-field-cnt {
    display: flex;
    flex: 1;
    width: 100%;
    flex-wrap: wrap;
    background-color: gainsboro;
    justify-content: space-between;
    }

    .photo-cnt {
    margin: 1vh 2vw;
    height: max-content;
    display: flex;
    justify-content: center;
    align-items: center;
    column-gap: 2vh
    }

    .photo-cnt button:hover {
    border: 1px solid darkolivegreen;
    background-color: darkolivegreen
    }

    .photo-cnt img {
    height: 5vw;
    object-fit: cover;
    object-position: center
    }

    .tariff-input-cnt {
    margin: 1vh 2vw;
    display: flex;
    flex-direction: column;
    align-items: flex-start
    }

    .tariff-input-cnt p {
    margin: 0 0 1vh 0;
    font-size: 0.8vw;
    font-weight: 600
    }

    .tariff-input-cnt input, .tariff-input-cnt select {
    width: 100%;
    font-size: 0.8vw;
    font-weight: 600;
    height: 4vh;
    padding: 0 0 0 1%;
    border-radius: 0;
    border: 1px solid black;
    margin: 0;
    box-shadow: 0 0 3px rgba(0, 0, 0, 0.5)
    }

    .tariff-input-cnt input:focus {
    border-color: indigo;
    outline: none
    }

    .button-cnt {
    display: flex;
    justify-content: flex-end;
    align-items: center;
    column-gap: 1vw;
    height: 15%;
    width: 100%
    }

    .button-cnt-done, .button-cnt-cancel {
    height: 4vh;
    border: 1px solid indianred;
    background-color: indianred;
    color: white;
    font-weight: 600;
    font-size: 0.8vw;
    padding: 0 0.5vw;
    border-radius: 0.3vw;
    transition: 0.2s;
    cursor: pointer
    }

    .button-cnt-cancel {
    margin: 0 1vw 0 0;
    border: 1px solid lightblue;
    background-color: lightblue
    }

    .button-cnt-done:hover {
    background-color: red;
    }

    .button-cnt-cancel:hover {
    background-color: lightskyblue
    }

    .message {
        position: absolute;
        margin: 0;
        color: red;
        font-size: 1vw;
        font-weight: 600;
        bottom: 2%;
        left: 2%
    }

    .exit {
    position: absolute;
    top: 25px;
    right: 25px;
    width: 2vw;
    height: 2vw;
    cursor: pointer
    }
</style>

<div class="tariff-popup" style="display:@(isVisible ? "flex" : "none")">
    <p>@(isAdding ? "Новый тариф" : "Изменить данные")</p>
    <div class="tariff-field-cnt">
        <div class="photo-cnt">
            @if(!string.IsNullOrEmpty(illustration64))
            {
                <img src="data:image/jpeg;base64,@illustration64" />
            }
            <InputFile OnChange="OnInputFileChange" />
        </div>
        <div class="tariff-input-cnt" style="width: 40%">
            <p>Наименование</p>
            <input @bind="name"/>
        </div>
        <div class="tariff-input-cnt" style="width: 30%">
            <p>Стоимость (₽ / месяц)</p>
            <input @bind="price" />
        </div>
        <div class="tariff-input-cnt" style="width: 45%">
            <p>Наполнение</p>
            <select @bind="content">
                <option>Интернет</option>
                <option>Интернет + ТВ</option>
                <option>Интернет + SIM</option>
                <option>Видеонаблюдение</option>
                <option>Интернет + ТВ + SIM</option>
                <option>Интернет + ТВ + SIM + Видеонаблюдение</option>
            </select>
        </div>
    </div>
    <div class="button-cnt">
        <button class="button-cnt-done" @onclick="checkAndConfirm">@(isAdding ? "Добавить" : "Изменить")</button>
        <button class="button-cnt-cancel" @onclick="Close">Отмена</button>
    </div>
    <img class="exit" src="images/exit.png" @onclick="Close" />
    @if (message != string.Empty)
    {
        <p class="message">@message</p>
    }
</div>

@code {
    [Parameter] public bool isVisible { get; set; }
    [Parameter] public EventCallback isVisibleChanged { get; set; }
    [Parameter] public EventCallback<Tariff> newTariff { get; set; }
    [Parameter] public EventCallback<Tariff> editTariff { get; set; }

    [Parameter] public bool isAdding { get; set; }
    [Parameter] public Tariff tariff { get; set; }
    private IBrowserFile? selectedFile;

    private string name = string.Empty, content = string.Empty, illustration64 = string.Empty;
    decimal price = 0;
    byte[] illustration;

    private string message = string.Empty;

    protected override void OnParametersSet()
    {
        name = isVisible && !isAdding ? tariff.Name : string.Empty;
        content = isVisible && !isAdding ? tariff.Content : string.Empty;
        price = isVisible && !isAdding ? tariff.Price : 0;
        illustration64 = isVisible && !isAdding ? tariff.Illustration64 : string.Empty;
        message = string.Empty;
    }

    private async Task OnInputFileChange(InputFileChangeEventArgs e)
    {
        selectedFile = e.File;
        await ConvertFileToBase64();
    }

    private async Task ConvertFileToBase64()
    {
        if (selectedFile != null)
        {
            using var stream = selectedFile.OpenReadStream();
            using var memoryStream = new MemoryStream();
            await stream.CopyToAsync(memoryStream);
            illustration = memoryStream.ToArray();

            illustration64 = Convert.ToBase64String(illustration);
        }
    }

    private async Task checkAndConfirm()
    {
        if (string.IsNullOrEmpty(name) || string.IsNullOrEmpty(content) || string.IsNullOrEmpty(illustration64))
        {
            message = "Заполните все поля!";
            return;
        }
        else if (price <= 0)
        {
            message = "Цена должна быть положительным числом!";
            return;
        }
        await Confirm();
    }

    private async Task Confirm()
    {
        Tariff tr = new Tariff()
            {
                Name = name,
                Content = content,
                Price = price,
                Illustration = illustration,
                Illustration64 = illustration64
            };

        if (isAdding)
            await newTariff.InvokeAsync(tr);
        else
            await editTariff.InvokeAsync(tr);

        Close();
    }

    private void Close() => isVisibleChanged.InvokeAsync();
}
